[General]
network = CoCoChainNetwork
sim-time-limit = 600s
warmup-period = 100s
seed-set = ${repetition}

# Scenario 1: High-density urban network
# 500 vehicles/km² on 4x4 grid topology (5 km²) = 2500 vehicles
**.numVehicles = 2500
**.playgroundSizeX = 2236m  # sqrt(5000000) for 5 km²
**.playgroundSizeY = 2236m
**.gridRows = 4
**.gridCols = 4

# Vehicle parameters
**.vehicle.numApps = 1
**.vehicle.app[0].typename = "CoCoChainApp"
**.vehicle.app[0].messageInterval = 1.5s
**.vehicle.app[0].corruptionProbability = 0.1  # 10% corruption rate
**.vehicle.app[0].bftThreshold = 0.67  # 2/3 Byzantine fault tolerance
**.vehicle.app[0].semanticVerification = true
**.vehicle.app[0].maxTransactionAge = 10s
**.vehicle.app[0].cosineSimilarityThreshold = 0.2  # θ = 0.2
**.vehicle.app[0].enablePbftComparison = true

# Network configuration
**.connectionManager.typename = "ConnectionManager"
**.connectionManager.maxInterfDist = 500m
**.connectionManager.sendDirect = true

# Physical layer
**.nic.phy.typename = "SimplePathlossModel"
**.nic.phy.alpha = 2.0
**.nic.phy.carrierFrequency = 5.9e9Hz

# MAC layer
**.nic.mac.typename = "Ieee80211Mac"
**.nic.mac.queueLength = 14

# CoCoChain specific parameters - removed, now in vehicle app section above

# Statistics collection
**.app[0].endToEndLatency.statistic-recording = true
**.app[0].consensusOverhead.statistic-recording = true
**.app[0].malformedDetected.statistic-recording = true
**.app[0].falsePositiveRate.statistic-recording = true
**.app[0].throughput.statistic-recording = true

# Repeat for statistical significance
repeat = 10

# Configuration for adversary variation testing
[Config AdversaryVariation]
extends = General
**.vehicle.app[0].corruptionProbability = ${adversaryPct=0.0, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18, 0.20}
sim-time-limit = 300s  # Shorter time for variation testing